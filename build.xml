<project name="Metacraft" default="main">
    <property environment="env"/>

	<property name="forge.dir" location="../forge"/>

	<property name="mcp.dir" location="${forge.dir}/mcp" />
	<property name="mcp.runtime.dir" location="${mcp.dir}/runtime" />
	<property name="python-win" location="${mcp.runtime.dir}/bin/python/python_mcp.exe" />
	<condition property="python" value="${python-win}" else="python">
		<os family="windows" />
	</condition>
	<condition property=".batsh" value=".bat" else=".sh">
		<os family="windows" />
	</condition>
	<condition property=".cmdsh" value=".cmd" else=".sh">
		<os family="windows" />
	</condition>
	
	<target name="git-detail">
		<echo>git.time</echo>
        <exec executable="git" outputproperty="git.time">
            <arg value="log"/>
            <arg value="-n1"/>
            <arg value="--pretty=%at"/>
        </exec>
		<echo>git.commit</echo>
        <exec executable="git" outputproperty="git.commit">
            <arg value="log"/>
            <arg value="-n1"/>
            <arg value="--pretty=%H"/>
        </exec>
		<echo>git.tags</echo>
        <exec executable="git" outputproperty="git.tags">
            <arg value="tag"/>
            <arg value="--contains"/>
            <arg value="${git.commit}"/>
        </exec>
		<echo>git.describe</echo>
        <exec executable="git" outputproperty="git.describe">
            <arg value="describe"/>
            <arg value="--dirty"/>
            <arg value="--always"/>
            <arg value="--abbrev=40"/>
            <arg value="--tags"/>
        </exec>
		<echo>git.branch</echo>
        <exec executable="git" outputproperty="git.branch">
            <arg value="branch"/>
            <arg value="--no-color"/>
        </exec>
		<echo>groovy</echo>
		<groovy>
			//<![CDATA[
			import java.math.BigInteger;
			import java.util.Queue;
			import java.util.ArrayDeque;
			import java.text.SimpleDateFormat;
			def time = new Date();
			def commitStr = properties["git.commit"];
			def commit = new BigInteger( commitStr, 16 );
			def tagLines = properties["git.tags"];
			Queue<String> tags = new ArrayDeque<>();
			int tagLinesLen = tagLines.length();
			if ( tagLines.length() != 0 ) {
				int cur = 0;
				int end = 0;
				for ( ; (end = tagLines.indexOf('\n', end)) != -1; cur = end+1 ) {
					tags.add( tagLines.substring( cur, tagLines.charAt(end-1) == '\r' ? end-1 : end ) );
				}
				if ( end == -1 && (tagLinesLen-1) > cur )
					tags.add( tagLines.substring( cur, tagLinesLen ) );
			}
			properties["git.tagline"] = tags.join('-');
			def wds = new SimpleDateFormat("YYYY'w'w'd'F").format(time);
			properties["weekdaystamp"] = wds;
			def desc = properties["git.describe"];
			properties["git.dirty"] = "no";
			if ( desc == commitStr ) {
				properties["git.describe"] = wds;
				properties["git.version"] = wds; 
			} else if ( desc.endsWith( commitStr ) ) {
				def vs = desc.substring( 0, desc.length() - 42 );
				properties["git.describe"] = vs;
				properties["git.version"] = vs;
			} else if ( desc.endsWith( "-dirty" ) ) {
				properties["git.dirty"] = "yes";
				if ( desc.length() > 40 ) {
					def vs = desc.substring( 0, desc.length() - 48 );
					properties["git.describe"] = vs + '-dirty';
					properties["git.version"] = vs;
				} else {
					properties["git.version"] = desc.substring( 0, desc.length() - 6 );
				}
			}
			println "git.describe = ${properties['git.describe']}";
			println "git.version = ${properties['git.version']}";
			println "weekdaystamp = ${properties['weekdaystamp']}";
			println "git.tagline = ${properties['git.tagline']}";
			println "git.commit = ${properties['git.commit']}";
			//]]>
		</groovy>
    </target>
    <target name="javadoc" depends="git-detail">
    	<fail message="Metacraft-${git.describe}-docs.jar has already been created.">
	    	<condition>
	    		<and>
	    			<isfalse value="${git.dirty}" />
	    	    	<available file="jar/Metacraft-${git.describe}-docs.jar"/>
	    		</and>
	    	</condition>
    	</fail>
    	<echo message="GROOVY_HOME = ${env.GROOVY_HOME}" />
        <javadoc access="protected" author="true"
			classpath="${env.GROOVY_HOME}\lib\groovy-2.1.2.jar;../forge/mcp/jars/bin/lwjgl.jar;../GuiAPI/bin;../GuiAPI/twl/bin;../forge/mcp/eclipse/Minecraft/bin;../forge/mcp/jars/bin/minecraft.jar;../GuiAPI/xpp3-1.1.4c;../forge/mcp/jars/bin/lwjgl_util.jar"
			destdir="javadoc" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" packagenames="jqw.metacraft.client,jqw.util,jqw.metacraft"
			source="1.7" sourcepath="src" splitindex="true" use="true" version="true">
        	<doctitle>Metacraft ${git.version}</doctitle>
        	<tag name="forbidden" description="Usage is forbidden." />
        	<tag name="warning" description="Warning: " />
        	<tag name="TODO" description="TODO: " />
    	</javadoc>
    	<jar destfile="jar/Metacraft-${git.describe}-docs.jar" level="9" duplicate="preserve">
        	<fileset dir="javadoc" />
        </jar>
    </target>
	<target name="set-version" depends="git-detail">
		<copy file="src/mcmod.info" todir="bin" overwrite="yes">
			<filterset begintoken="@" endtoken="@">
				<filter token="VERSION" value="${git.version}"/>
			</filterset>
		</copy>
	    <propertyfile file="bin/version.properties">
	      <entry key="Metacraft.version" type="string" value="${git.describe}-${weekdaystamp}-${git.commit}"/>
	    </propertyfile>
	</target>
	<target name="reobfuscate">
		<condition property="mcp.bin.backed-up">
			<available file="${forge.dir}/mcp/bin_bkp" />
		</condition>
		<condition property="mcp.bin.missing">
			<not>
				<available file="${forge.dir}/mcp/bin" />
			</not>
		</condition>
		<condition property="mcp.bin.missing.os" value="${os.name}" else="derp">
			<istrue value="${mcp.bin.missing}"/>
		</condition>

		<fail message="MCP sources missing.">
			<condition>
				<not>
					<available file="${forge.dir}/mcp/src" />
				</not>
			</condition>
		</fail>
		
		<mkdir dir="${forge.dir}/mcp/bin" />
        	
		<echo message="Recompiling required? ${mcp.bin.missing}" />
        <exec executable="${python}" dir="${mcp.dir}" os="${mcp.bin.missing.os}">
            <arg value="${mcp.runtime.dir}/recompile.py"/>
            <arg value="--client"/>
        </exec>
		
		<mkdir dir="${forge.dir}/mcp/bin_bkp" />

		<echo message="Have backup? ${mcp.bin.backed-up}" />
		<copy todir="${forge.dir}/mcp/bin_bkp">
			<fileset dir="${forge.dir}/mcp/bin">
				<!-- if it's not backed up, back it up -->
				<exclude name="**" if="${mcp.bin.backed-up}" />
			</fileset>
		</copy>

		<echo message="Quick-cleaing MCP bin..." />
		<delete failonerror="false" verbose="yes">
			<fileset dir="${forge.dir}/mcp/bin/minecraft">
				<!-- delete if not in the backup, and will not be overwritten -->
				<and>
					<present present="srconly" targetdir="bin" />
					<present present="srconly"
						targetdir="${forge.dir}/mcp/bin_bkp/minecraft" />
				</and>
			</fileset>
		</delete>

		<echo message="Quick-restoring MCP bin..." />
		<copy todir="${forge.dir}/mcp/bin/minecraft">
			<fileset dir="${forge.dir}/mcp/bin_bkp/minecraft">
				<or>
					<present present="srconly" targetdir="${forge.dir}/mcp/bin/minecraft" />
					<and>
						<present present="both" targetdir="${forge.dir}/mcp/bin/minecraft" />
						<modified algorithm="checksum" seldirs="yes" />
					</and>
				</or>
			</fileset>
		</copy>
		
		<echo message="Copying changed classes into MCP..." />
		<copy todir="${forge.dir}/mcp/bin/minecraft" verbose="yes">
			<fileset dir="bin" includes="**/*.class">
				<or>
					<present present="srconly" targetdir="${forge.dir}/mcp/bin/minecraft" />
					<and>
						<present present="both" targetdir="${forge.dir}/mcp/bin/minecraft" />
						<modified algorithm="checksum" seldirs="yes" />
					</and>
				</or>
			</fileset>
		</copy>
		
		<echo message="Reobfuscating..." />
        <exec executable="${python}" dir="${mcp.dir}">
            <arg value="${mcp.runtime.dir}/reobfuscate.py"/>
            <arg value="--client"/>
        	<arg value="--srgnames"/>
        </exec>
		
		<mkdir dir="reobf" />
		<echo message="Cleaning reobfuscation cache..." />
		<delete failonerror="false" verbose="yes">
			<fileset dir="reobf">
				<present present="srconly" targetdir="${forge.dir}/mcp/reobf/minecraft" />
			</fileset>
		</delete>
		<echo message="Copying reobfuscated classes to project..." />
		<copy todir="reobf" verbose="yes">
			<fileset dir="${forge.dir}/mcp/reobf/minecraft">
				<or>
					<present present="srconly" targetdir="reobf" />
					<and>
						<present present="both" targetdir="reobf" />
						<modified algorithm="checksum" seldirs="yes" />
					</and>
				</or>
			</fileset>
		</copy>
	</target>
    <target name="package" depends="set-version,reobfuscate">
    	<fail message="Metacraft-${git.describe}.jar has already been created.">
	    	<condition>
	    		<and>
	    			<isfalse value="${git.dirty}" />
	    	    	<available file="jar/Metacraft-${git.describe}.jar" />
	    		</and>
	    	</condition>
    	</fail>
    	<jar destfile="jar/Metacraft-${git.describe}.jar" level="9" duplicate="preserve">
			<fileset dir="reobf" />
    		<fileset dir="bin">
    			<not><present present="both" targetdir="reobf" /></not>
    		</fileset>
        	<fileset dir="src">
    			<not><present present="both" targetdir="bin" /></not>
        	</fileset>
        </jar>
    </target>
	<!-- Perform forge install, copy source to mcp/src, recompile/obfuscate, package to jar -->
    <target name="main" depends="package"/>

</project>